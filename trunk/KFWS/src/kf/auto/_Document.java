package kf.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;

import kf.Documentvalue;
import kf.Page;
import kf.Project;
import kf.Workflow;
import kf.Workflowcomment;
import kf.Workflowstep;

/**
 * Class _Document was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Document extends CayenneDataObject {

    public static final String ARCHIVE_DATE_PROPERTY = "archiveDate";
    public static final String ARCHIVE_PATH_PROPERTY = "archivePath";
    public static final String ARCHIVE_TYPE_PROPERTY = "archiveType";
    public static final String DATE_CREATED_PROPERTY = "dateCreated";
    public static final String DOCUMENT_ID_PROPERTY = "documentID";
    public static final String DOCUMENT_NAME_PROPERTY = "documentName";
    public static final String NEEDS_UPDATE_PROPERTY = "needsUpdate";
    public static final String OWNER_ID_PROPERTY = "ownerID";
    public static final String STATUS_PROPERTY = "status";
    public static final String DOCUMENTVALUES_PROPERTY = "documentvalues";
    public static final String PAGES_PROPERTY = "pages";
    public static final String PROJECT_PROPERTY = "project";
    public static final String WORKFLOWCOMMENTS_PROPERTY = "workflowcomments";
    public static final String WORKFLOWS_PROPERTY = "workflows";
    public static final String WORKFLOWSTEPS_PROPERTY = "workflowsteps";

    public static final String DOCUMENT_ID_PK_COLUMN = "DocumentID";

    public void setArchiveDate(Integer archiveDate) {
        writeProperty("archiveDate", archiveDate);
    }
    public Integer getArchiveDate() {
        return (Integer)readProperty("archiveDate");
    }

    public void setArchivePath(String archivePath) {
        writeProperty("archivePath", archivePath);
    }
    public String getArchivePath() {
        return (String)readProperty("archivePath");
    }

    public void setArchiveType(String archiveType) {
        writeProperty("archiveType", archiveType);
    }
    public String getArchiveType() {
        return (String)readProperty("archiveType");
    }

    public void setDateCreated(Integer dateCreated) {
        writeProperty("dateCreated", dateCreated);
    }
    public Integer getDateCreated() {
        return (Integer)readProperty("dateCreated");
    }

    public void setDocumentID(Long documentID) {
        writeProperty("documentID", documentID);
    }
    public Long getDocumentID() {
        return (Long)readProperty("documentID");
    }

    public void setDocumentName(String documentName) {
        writeProperty("documentName", documentName);
    }
    public String getDocumentName() {
        return (String)readProperty("documentName");
    }

    public void setNeedsUpdate(Boolean needsUpdate) {
        writeProperty("needsUpdate", needsUpdate);
    }
    public Boolean getNeedsUpdate() {
        return (Boolean)readProperty("needsUpdate");
    }

    public void setOwnerID(Integer ownerID) {
        writeProperty("ownerID", ownerID);
    }
    public Integer getOwnerID() {
        return (Integer)readProperty("ownerID");
    }

    public void setStatus(String status) {
        writeProperty("status", status);
    }
    public String getStatus() {
        return (String)readProperty("status");
    }

    public void addToDocumentvalues(Documentvalue obj) {
        addToManyTarget("documentvalues", obj, true);
    }
    public void removeFromDocumentvalues(Documentvalue obj) {
        removeToManyTarget("documentvalues", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Documentvalue> getDocumentvalues() {
        return (List<Documentvalue>)readProperty("documentvalues");
    }


    public void addToPages(Page obj) {
        addToManyTarget("pages", obj, true);
    }
    public void removeFromPages(Page obj) {
        removeToManyTarget("pages", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Page> getPages() {
        return (List<Page>)readProperty("pages");
    }


    public void setProject(Project project) {
        setToOneTarget("project", project, true);
    }

    public Project getProject() {
        return (Project)readProperty("project");
    }


    public void addToWorkflowcomments(Workflowcomment obj) {
        addToManyTarget("workflowcomments", obj, true);
    }
    public void removeFromWorkflowcomments(Workflowcomment obj) {
        removeToManyTarget("workflowcomments", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Workflowcomment> getWorkflowcomments() {
        return (List<Workflowcomment>)readProperty("workflowcomments");
    }


    public void addToWorkflows(Workflow obj) {
        addToManyTarget("workflows", obj, true);
    }
    public void removeFromWorkflows(Workflow obj) {
        removeToManyTarget("workflows", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Workflow> getWorkflows() {
        return (List<Workflow>)readProperty("workflows");
    }


    public void addToWorkflowsteps(Workflowstep obj) {
        addToManyTarget("workflowsteps", obj, true);
    }
    public void removeFromWorkflowsteps(Workflowstep obj) {
        removeToManyTarget("workflowsteps", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Workflowstep> getWorkflowsteps() {
        return (List<Workflowstep>)readProperty("workflowsteps");
    }


}
